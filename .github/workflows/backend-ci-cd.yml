name: backend-ci-cd

on:
  push:
  pull_request:
  workflow_dispatch:

# Cancel in-flight runs on the same ref and keep only the latest
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Needed to read code and push images to GHCR
permissions:
  contents: read
  packages: write

jobs:
  # 1) Test (pytest)
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Show env & SQL presence
        run: |
          python -V
          pwd
          find . -maxdepth 4 -type f -name "*.sql" -print || true

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Fallback: ensure core libs exist even if requirements.txt is incomplete
          python - <<'PY'
          import importlib, sys, subprocess
          need=[]
          for m in ["fastapi","uvicorn","pydantic","httpx"]:
            try: importlib.import_module(m)
            except Exception: need.append(m+"[standard]" if m=="uvicorn" else m)
          if need: subprocess.check_call([sys.executable,"-m","pip","install","-U",*need])
          PY
          pip install -U pytest

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
        run: pytest -q

  # 2) Build and push image to GHCR (main branch only)
  build_and_push_image:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=raw,value=sha-${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 3) (Optional) SSH deploy to a server
  # Enable by setting repository variable DEPLOY_ENABLED=true
  # Required secrets:
  #   SSH_HOST, SSH_USER, SSH_KEY (PEM contents)
  #   GHCR_USER, GHCR_TOKEN (token with read:packages)
  deploy_staging:
    needs: build_and_push_image
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_ENABLED == 'true'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            # Prepare deploy directory
            sudo mkdir -p /srv/executive-dashboard
            sudo chown -R $USER:$USER /srv/executive-dashboard
            cd /srv/executive-dashboard

            # Write docker-compose file (exposes service on port 80 externally)
            cat > docker-compose.yml <<'YML'
            services:
              api:
                image: ghcr.io/${{ github.repository }}/backend:latest
                restart: unless-stopped
                ports:
                  - "80:8000"   # public 80 -> container 8000
                environment:
                  - DATABASE_URL=sqlite:///app/app/data/app.db
                volumes:
                  - app-data:/app/app/data
            volumes:
              app-data:
            YML

            # Login to GHCR (server side) and deploy
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin
            docker compose pull
            docker compose up -d

            # Wait until the app is ready (max ~60s)
            for i in {1..30}; do
              if curl -fsS http://localhost/api/health >/dev/null; then
                echo "Health check passed."
                break
              fi
              echo "Waiting for app to become healthy ($i/30)..."
              sleep 2
            done
            # Final assert (will fail the step if unhealthy)
            curl -fsS http://localhost/api/health
